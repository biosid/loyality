//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultBase", Namespace="http://schemas.datacontract.org/2004/07/Rapidsoft.Loyalty.NotificationSystem.API." +
        "OutputResults")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.GetMessagesToNotifyResult))]
    public partial class ResultBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResultCode {
            get {
                return this.ResultCodeField;
            }
            set {
                if ((this.ResultCodeField.Equals(value) != true)) {
                    this.ResultCodeField = value;
                    this.RaisePropertyChanged("ResultCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultDescription {
            get {
                return this.ResultDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultDescriptionField, value) != true)) {
                    this.ResultDescriptionField = value;
                    this.RaisePropertyChanged("ResultDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetMessagesToNotifyResult", Namespace="http://schemas.datacontract.org/2004/07/Rapidsoft.Loyalty.NotificationSystem.API." +
        "OutputResults")]
    [System.SerializableAttribute()]
    public partial class GetMessagesToNotifyResult : Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.ResultBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.ThreadMessagesToNotify[] MessagesByThreadIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.ThreadMessagesToNotify[] MessagesByThreadId {
            get {
                return this.MessagesByThreadIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesByThreadIdField, value) != true)) {
                    this.MessagesByThreadIdField = value;
                    this.RaisePropertyChanged("MessagesByThreadId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThreadMessagesToNotify", Namespace="http://schemas.datacontract.org/2004/07/Rapidsoft.Loyalty.NotificationSystem.API." +
        "Entities")]
    [System.SerializableAttribute()]
    public partial class ThreadMessagesToNotify : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FirstMessageIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LastMessageIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ThreadIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FirstMessageIndex {
            get {
                return this.FirstMessageIndexField;
            }
            set {
                if ((this.FirstMessageIndexField.Equals(value) != true)) {
                    this.FirstMessageIndexField = value;
                    this.RaisePropertyChanged("FirstMessageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LastMessageIndex {
            get {
                return this.LastMessageIndexField;
            }
            set {
                if ((this.LastMessageIndexField.Equals(value) != true)) {
                    this.LastMessageIndexField = value;
                    this.RaisePropertyChanged("LastMessageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ThreadId {
            get {
                return this.ThreadIdField;
            }
            set {
                if ((this.ThreadIdField.Equals(value) != true)) {
                    this.ThreadIdField = value;
                    this.RaisePropertyChanged("ThreadId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarkMessagesAsNotifiedParameters", Namespace="http://schemas.datacontract.org/2004/07/Rapidsoft.Loyalty.NotificationSystem.API." +
        "InputParameters")]
    [System.SerializableAttribute()]
    public partial class MarkMessagesAsNotifiedParameters : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.ThreadMessagesToMarkAsNotified[] MessagesByThreadIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.ThreadMessagesToMarkAsNotified[] MessagesByThreadId {
            get {
                return this.MessagesByThreadIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesByThreadIdField, value) != true)) {
                    this.MessagesByThreadIdField = value;
                    this.RaisePropertyChanged("MessagesByThreadId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThreadMessagesToMarkAsNotified", Namespace="http://schemas.datacontract.org/2004/07/Rapidsoft.Loyalty.NotificationSystem.API." +
        "Entities")]
    [System.SerializableAttribute()]
    public partial class ThreadMessagesToMarkAsNotified : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LastMessageIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ThreadIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LastMessageIndex {
            get {
                return this.LastMessageIndexField;
            }
            set {
                if ((this.LastMessageIndexField.Equals(value) != true)) {
                    this.LastMessageIndexField = value;
                    this.RaisePropertyChanged("LastMessageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ThreadId {
            get {
                return this.ThreadIdField;
            }
            set {
                if ((this.ThreadIdField.Equals(value) != true)) {
                    this.ThreadIdField = value;
                    this.RaisePropertyChanged("ThreadId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FeedbackEmailNotificationQueueService.IFeedbackEmailNotificationQueueService")]
    public interface IFeedbackEmailNotificationQueueService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupportService/Echo", ReplyAction="http://tempuri.org/ISupportService/EchoResponse")]
        string Echo(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupportService/Echo", ReplyAction="http://tempuri.org/ISupportService/EchoResponse")]
        System.Threading.Tasks.Task<string> EchoAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFeedbackEmailNotificationQueueService/GetMessagesToNotify", ReplyAction="http://tempuri.org/IFeedbackEmailNotificationQueueService/GetMessagesToNotifyResp" +
            "onse")]
        Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.GetMessagesToNotifyResult GetMessagesToNotify();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFeedbackEmailNotificationQueueService/GetMessagesToNotify", ReplyAction="http://tempuri.org/IFeedbackEmailNotificationQueueService/GetMessagesToNotifyResp" +
            "onse")]
        System.Threading.Tasks.Task<Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.GetMessagesToNotifyResult> GetMessagesToNotifyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFeedbackEmailNotificationQueueService/MarkMessagesAsNotified", ReplyAction="http://tempuri.org/IFeedbackEmailNotificationQueueService/MarkMessagesAsNotifiedR" +
            "esponse")]
        Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.ResultBase MarkMessagesAsNotified(Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.MarkMessagesAsNotifiedParameters parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFeedbackEmailNotificationQueueService/MarkMessagesAsNotified", ReplyAction="http://tempuri.org/IFeedbackEmailNotificationQueueService/MarkMessagesAsNotifiedR" +
            "esponse")]
        System.Threading.Tasks.Task<Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.ResultBase> MarkMessagesAsNotifiedAsync(Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.MarkMessagesAsNotifiedParameters parameters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFeedbackEmailNotificationQueueServiceChannel : Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.IFeedbackEmailNotificationQueueService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FeedbackEmailNotificationQueueServiceClient : System.ServiceModel.ClientBase<Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.IFeedbackEmailNotificationQueueService>, Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.IFeedbackEmailNotificationQueueService {
        
        public FeedbackEmailNotificationQueueServiceClient() {
        }
        
        public FeedbackEmailNotificationQueueServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FeedbackEmailNotificationQueueServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FeedbackEmailNotificationQueueServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FeedbackEmailNotificationQueueServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Echo(string message) {
            return base.Channel.Echo(message);
        }
        
        public System.Threading.Tasks.Task<string> EchoAsync(string message) {
            return base.Channel.EchoAsync(message);
        }
        
        public Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.GetMessagesToNotifyResult GetMessagesToNotify() {
            return base.Channel.GetMessagesToNotify();
        }
        
        public System.Threading.Tasks.Task<Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.GetMessagesToNotifyResult> GetMessagesToNotifyAsync() {
            return base.Channel.GetMessagesToNotifyAsync();
        }
        
        public Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.ResultBase MarkMessagesAsNotified(Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.MarkMessagesAsNotifiedParameters parameters) {
            return base.Channel.MarkMessagesAsNotified(parameters);
        }
        
        public System.Threading.Tasks.Task<Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.ResultBase> MarkMessagesAsNotifiedAsync(Rapidsoft.Loyalty.NotificationSystem.WsClients.FeedbackEmailNotificationQueueService.MarkMessagesAsNotifiedParameters parameters) {
            return base.Channel.MarkMessagesAsNotifiedAsync(parameters);
        }
    }
}
