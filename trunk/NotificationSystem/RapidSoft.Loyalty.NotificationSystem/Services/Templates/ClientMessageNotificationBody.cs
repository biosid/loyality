// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Rapidsoft.Loyalty.NotificationSystem.Services.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\src\VTB24\trunk\NotificationSystem\RapidSoft.Loyalty.NotificationSystem\Services\Templates\ClientMessageNotificationBody.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class ClientMessageNotificationBody : ClientMessageNotificationBodyBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Новое сообщение в программе «Коллек" +
                    "ция»</title>\r\n  </head>\r\n  <body marginheight=\"0\" topmargin=\"0\" marginwidth=\"0\" " +
                    "leftmargin=\"0\" bgcolor=\"#e3e8ed\" style=\"padding-top:0;padding-bottom:0;padding-r" +
                    "ight:0;padding-left:0;margin-top:0;margin-bottom:0;margin-right:0;margin-left:0;" +
                    "font-family:arial, sans-serif;\" >\r\n\r\n    <!-- шапка -->\r\n    <table cellpadding=" +
                    "\"0\" cellspacing=\"0\" border=\"0\" height=\"150\" width=\"100%\" align=\"center\">\r\n      " +
                    "<tr>\r\n        <td background=\"cid:header_bg\" bgcolor=\"#e3e8ed\" valign=\"top\" styl" +
                    "e=\"font-family:arial, sans-serif;\" >\r\n          <!--[if gte mso 9]>\r\n           " +
                    "   <v:rect xmlns:v=\"urn:schemas-microsoft-com:vml\" fill=\"true\" stroke=\"false\" st" +
                    "yle=\"mso-width-percent:1000;height:150px;\" >\r\n                <v:fill type=\"tile" +
                    "\" src=\"cid:header_bg\" color=\"#e3e8ed\" />\r\n                <v:textbox inset=\"0,0," +
                    "0,0\">\r\n                  <![endif]-->\r\n          <div>\r\n            <table cellp" +
                    "adding=\"0\" cellspacing=\"0\" border=\"0\" align=\"center\" width=\"640\">\r\n             " +
                    " <tr height=\"150\"><td colspan=\"3\" valign=\"top\" align=\"left\" style=\"font-family:a" +
                    "rial, sans-serif;\" >\r\n                  <a href=\"https://bonus.vtb24.ru/\" style=" +
                    "\"color:#00367b;\" ><img src=\"cid:logo\"></a>\r\n              </td></tr>\r\n          " +
                    "  </table>\r\n          </div>\r\n          <!--[if gte mso 9]>\r\n              </v:t" +
                    "extbox>\r\n              </v:rect>\r\n              <![endif]-->\r\n        </td>\r\n   " +
                    "   </tr>\r\n    </table>\r\n    <!-- /шапка -->\r\n\r\n    <table cellpadding=\"0\" cellsp" +
                    "acing=\"0\" bgcolor=\"#e3e8ed\" width=\"100%\">\r\n      <tr>\r\n        <td style=\"font-f" +
                    "amily:arial, sans-serif;\" >\r\n          <!-- сообщение -->\r\n          <table cell" +
                    "padding=\"0\" cellspacing=\"0\" align=\"center\" bgcolor=\"#e3e8ed\">\r\n            <tr h" +
                    "eight=\"18\"><td colspan=\"3\" style=\"font-family:arial, sans-serif;\" ></td></tr><!-" +
                    "- падинг -->\r\n            <tr>\r\n              <td style=\"font-family:arial, sans" +
                    "-serif;\" ></td>\r\n              <td background=\"cid:message_top\" bgcolor=\"#ffffff" +
                    "\" width=\"580\" height=\"5\" valign=\"top\" style=\"font-family:arial, sans-serif;\" >\r\n" +
                    "                <!--[if gte mso 9]>\r\n                    <v:rect xmlns:v=\"urn:sc" +
                    "hemas-microsoft-com:vml\" fill=\"true\" stroke=\"false\" style=\"width:580px;height:5p" +
                    "x;\" >\r\n                      <v:fill type=\"tile\" src=\"cid:message_top\" color=\"#f" +
                    "fffff\" />\r\n                      <v:textbox inset=\"0,0,0,0\">\r\n                  " +
                    "      <![endif]-->\r\n                <div> </div>\r\n                <!--[if gte ms" +
                    "o 9]>\r\n                    </v:textbox>\r\n                    </v:rect>\r\n        " +
                    "            <![endif]-->\r\n              </td>\r\n              <td style=\"font-fam" +
                    "ily:arial, sans-serif;\" ></td>\r\n            </tr>\r\n            <tr>\r\n           " +
                    "   <td width=\"30\" style=\"font-family:arial, sans-serif;\" ></td>\r\n              <" +
                    "td background=\"cid:message_bg\" bgcolor=\"#ffffff\" width=\"580\" valign=\"top\" align=" +
                    "\"left\" style=\"font-family:arial, sans-serif;\" >\r\n                <!--[if gte mso" +
                    " 9]>\r\n                    <v:rect xmlns:v=\"urn:schemas-microsoft-com:vml\" fill=\"" +
                    "true\" stroke=\"false\" style=\"width:580px;\" >\r\n                      <v:fill type=" +
                    "\"tile\" src=\"cid:message_bg\" color=\"#ffffff\" />\r\n                      <v:textbox" +
                    "  inset=\"0,0,0,0\" style=\"mso-fit-shape-to-text:true;\" >\r\n                       " +
                    " <![endif]-->\r\n                <div>\r\n\r\n                  <!-- содержимое -->\r\n " +
                    "                 <table cellpadding=\"0\" cellspacing=\"0\" width=\"580\">\r\n          " +
                    "          <tr height=\"24\"><td colspan=\"4\" style=\"font-family:arial, sans-serif;\"" +
                    " ></td></tr>\r\n                    <tr>\r\n                      <td width=\"30\" sty" +
                    "le=\"font-family:arial, sans-serif;\" ></td>\r\n                      <td width=\"105" +
                    "\" valign=\"top\" style=\"font-family:arial, sans-serif;\" >\r\n                       " +
                    " <img src=\"cid:content_bg\">\r\n                      </td>\r\n                      " +
                    "<td width=\"415\" valign=\"top\" style=\"font-family:arial, sans-serif;\" >\r\n         " +
                    "               <p class=\"h1\" style=\"margin-bottom:15px;margin-right:0;margin-lef" +
                    "t:0;font-size:18px;color:#00367b;margin-top:0;\" >Уважаемый клиент!</p>\r\n        " +
                    "                <p style=\"font-size:14px;color:#363636;margin-top:15px;margin-bo" +
                    "ttom:15px;margin-right:0;margin-left:0;\" >\r\n                          У Вас ново" +
                    "е сообщение в личном кабинете, для его просмотра перейдите, пожалуйста, по ссылк" +
                    "е:\r\n                        </p>\r\n                        <p style=\"font-size:14" +
                    "px;color:#363636;margin-top:15px;margin-bottom:15px;margin-right:0;margin-left:0" +
                    ";\" >\r\n                          <a href=\"");
            
            #line 84 "C:\src\VTB24\trunk\NotificationSystem\RapidSoft.Loyalty.NotificationSystem\Services\Templates\ClientMessageNotificationBody.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ThreadUrl));
            
            #line default
            #line hidden
            this.Write("\" style=\"color:#00367b;\" >");
            
            #line 84 "C:\src\VTB24\trunk\NotificationSystem\RapidSoft.Loyalty.NotificationSystem\Services\Templates\ClientMessageNotificationBody.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ThreadUrl));
            
            #line default
            #line hidden
            this.Write(@"</a>
                        </p>
                        <p class=""signature"" style=""font-size:14px;margin-top:15px;margin-bottom:15px;margin-right:0;margin-left:0;color:#8894b1;font-style:italic;"" >
                          C уважением,<br>
                          Бонусная Программа «Коллекция»
                        </p>
                        <p class=""unsubscribe"" style=""color:#8894b1;font-size:10px;margin-top:30px;margin-bottom:0;margin-right:0;margin-left:0;"" >
                          Перейдите по <a href=""");
            
            #line 91 "C:\src\VTB24\trunk\NotificationSystem\RapidSoft.Loyalty.NotificationSystem\Services\Templates\ClientMessageNotificationBody.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UnsubscribeUrl));
            
            #line default
            #line hidden
            this.Write("\" style=\"color:#00367b;\" >ссылке</a>, чтобы отписаться от оповещений.\r\n          " +
                    "              </p>\r\n                      </td>\r\n                      <td width" +
                    "=\"30\" style=\"font-family:arial, sans-serif;\" ></td>\r\n                    </tr>\r\n" +
                    "                    <tr height=\"24\" ><td colspan=\"4\" style=\"font-family:arial, s" +
                    "ans-serif;\" ></td></tr>\r\n                  </table>\r\n                  <!-- /сод" +
                    "ержимое -->\r\n\r\n                </div>\r\n                <!--[if gte mso 9]>\r\n    " +
                    "                </v:textbox>\r\n                    </v:rect>\r\n                   " +
                    " <![endif]-->\r\n              </td>\r\n              <td width=\"30\" style=\"font-fam" +
                    "ily:arial, sans-serif;\" ></td>\r\n            </tr>\r\n            <tr>\r\n           " +
                    "   <td style=\"font-family:arial, sans-serif;\" ></td>\r\n              <td backgrou" +
                    "nd=\"cid:message_bottom\" bgcolor=\"#ffffff\" width=\"580\" height=\"7\" valign=\"top\" st" +
                    "yle=\"font-family:arial, sans-serif;\" >\r\n                <!--[if gte mso 9]>\r\n   " +
                    "                 <v:rect xmlns:v=\"urn:schemas-microsoft-com:vml\" fill=\"true\" str" +
                    "oke=\"false\" style=\"width:580px;height:7px;\" >\r\n                      <v:fill typ" +
                    "e=\"tile\" src=\"cid:message_bottom\" color=\"#ffffff\" />\r\n                      <v:t" +
                    "extbox inset=\"0,0,0,0\">\r\n                        <![endif]-->\r\n                <" +
                    "div>  </div>\r\n                <!--[if gte mso 9]>\r\n                    </v:textb" +
                    "ox>\r\n                    </v:rect>\r\n                    <![endif]-->\r\n          " +
                    "    </td>\r\n              <td style=\"font-family:arial, sans-serif;\" ></td>\r\n    " +
                    "        </tr>\r\n            <tr><td conspan=\"3\" height=\"18\" style=\"font-family:ar" +
                    "ial, sans-serif;\" ></td></tr><!-- падинг -->\r\n          </table>\r\n          <!--" +
                    " /сообщение -->\r\n        </td>\r\n      </tr>\r\n    </table>\r\n  </body>\r\n</html>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class ClientMessageNotificationBodyBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
